// This file is responsible for styling the page a user will see if their scan
// on a device detects any malware.
import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, Alert, TouchableOpacity, ActivityIndicator, } from 'react-native';
import { useNavigation, useTheme } from '@react-navigation/native';
import { NativeModules } from 'react-native';
import { performSecurityScan } from '../utils/securityUtils';
import API from '../utils/api';
import AsyncStorage from '@react-native-async-storage/async-storage';

// This will be used for giving the user the option of deleting any malware that is found.
const { DeleteApps } = NativeModules;

// This loads the malware that was found in the scan.
const MalwareDetectedScreen = ({ route }: { route: any }) => {
  const { colors, dark } = useTheme(); // Checks for dark theme mode.
  const navigation = useNavigation<any>();
  const [malware, setMalware] = useState<string[]>(route.params?.malware || []);
  const [loading, setLoading] = useState(false);

  // In this section, I am applying deleteMalware. 
  const deleteMalware = async () => { // Declaring the asynchronous function.
    const packageNames = malware // Initialises a constant variable processing the malware array.
      .map((label: string): string | null => {  // Iterates over each name in the malware array.
        const start = label.lastIndexOf('('); // Finds last occurence index of a opening parenthesis within the label string
        const end = label.lastIndexOf(')'); // This does the same but for a closing parenthesis context.
        // 
        if (start !== -1 && end !== -1 && end > start) { // Checks if both parenthesis were found.
          return label.slice(start + 1, end).trim(); // If true, extract the substring and remove whitespace.
        }
        return null; // If false, the function returns nothing.
      })
      // This will process the array of results. 
      .filter((pkg: string | null): pkg is string => !!pkg); // Filters the array of elements found when the returned true.

    // After filtering, this checks whether the array is emtpty. 
    if (packageNames.length === 0) { 
      Alert.alert('Error', 'No valid package names were found.'); // Error message is displayed.
      return;
    }

    // This block implements error handling. Try to execute a task,
    // Catch to display any errors in the executing the tasks.
    try {
      // This iterates over each package in the array and calls the
      // uninstallApp function from DeleteApps.
      packageNames.forEach((pkg: string) => {
        DeleteApps.uninstallApp(pkg);
      });
      // After uninstall attempt is triggered, an alert is displayed.
      Alert.alert(
        'Uninstall triggered', // Alert title.
        'After uninstalling, press OK to rescan.',
        [
          {
            text: 'OK', // Defines the OK button.
            onPress: async () => { // When pressed, an asynchronous function is executed.
              setLoading(true);
              try { // Another error handling activity for rescans.
                const scan = await performSecurityScan(); // Calls the function to perform new scan and stores in scan variable.
                const deviceId = await AsyncStorage.getItem('deviceId'); // Asynchronously retrieves a value from deviceId key.
                if (deviceId) { // Checks whether device ID was retrieved correctly.
                  const { deviceId: _omit, ...cleanedScan } = scan; // New object containing all properties of scan object (removing deviceId).
                  const payload = { ...cleanedScan, deviceId }; // payload object created with new cleanedScan data and deviceId.
                  await API.post('/device/scan', payload); // Post request to the API endpoint with the the payload.
                }
                // Checks whether any malware was found in the rescan. 
                if (scan.malware.length === 0) {
                  navigation.navigate('Scan Results'); // If there is no malware, navigate to Scan Results page.
                } else { // Otherwise, alert the user of malware still being found on the device.
                  setMalware(scan.malware);
                  navigation.navigate('Malware Found'); // Navigate to Malware detected page.
                }
              } catch (err) { // If any error occurs during the rescan, then inform the user.
                console.error('Rescan error:', err);
                Alert.alert('Error', 'Rescan failed.');
              } finally {
                setLoading(false);
              }
            },
          },
        ]
      );
    } catch (err) { // Finds any errors that occur during the initial uninstall attempt.
      console.error('Uninstall error:', err);
      Alert.alert('Error', 'Uninstall failed.');
    }
  };

  // Returns a page that considers the theme mode that is toggled, the title, and the delete button.
  return (
    <ScrollView contentContainerStyle={[styles.container, { backgroundColor: colors.background }]}>
      <View
        style={[
          styles.alertBox,
          { backgroundColor: dark ? '#5c1a1a' : '#ffcccc' },
        ]}
      >
        <Text style={[styles.alertTitle, { color: '#fff' }]}>MALWARE DETECTED</Text>
        {malware.map((app: string, index: number) => ( /* Returns string of found malware.*/
          <Text key={index} style={[styles.appText, { color: '#fff' }]}>
            {app}
          </Text>
        ))}
        <TouchableOpacity /* Creates the delete button on the malware detection card.*/
          style={[
            styles.button,
            { backgroundColor: dark ? '#d9534f' : '#007bff' },
          ]}
          onPress={deleteMalware}
        >
          <Text style={styles.buttonText}>DELETE MALWARE APPS</Text>
        </TouchableOpacity>
        {loading && <ActivityIndicator size="large" color="#fff" style={styles.spinner} />}
      </View>
    </ScrollView>
  );
};

// This is the specific styling of the page.
const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 40,
    paddingHorizontal: 20,
  },
  alertBox: {
    padding: 20,
    borderRadius: 10,
    width: '100%',
    alignItems: 'center',
    elevation: 3,
  },
  alertTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  appText: {
    fontSize: 16,
    marginBottom: 6,
    textAlign: 'center',
  },
  button: {
    marginTop: 20,
    paddingVertical: 14,
    paddingHorizontal: 24,
    borderRadius: 8,
    width: '100%',
    alignItems: 'center',
    elevation: 2,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  spinner: {
    marginTop: 20,
  },
});
export default MalwareDetectedScreen;